# -*- coding: utf-8 -*-

#import readline

# Form implementation generated from reading ui file 'demo1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
from PyQt5.QtCore import QTimer
from tha2.poser.poser import Poser, PoseParameterCategory, PoseParameterGroup
from tha2.util import extract_PIL_image_from_filelike, resize_PIL_image, extract_pytorch_image_from_PIL_image, convert_output_image_from_torch_to_numpy
import os
import sys
from typing import List
sys.path.append(os.getcwd())
import numpy as np
import time
import numpy
import torch
import PIL.Image
cnt=0
import pyautogui
from PyQt5.QtCore import *
import random
class Ui_MainWindow(object):



    def call_cursor(self):
        sanae=1
        y,x=pyautogui.position()
        if(self.action_flag==0 and self.checkBox.isChecked()==False):
            y-=450
            x-=800
            y/=-450.0
            x/=-800.0
            self.horizontalSlider_9.setValue(int(x*50+50))
            self.horizontalSlider_10.setValue(int(y*50+50))
            self.horizontalSlider_11.setValue(int(min(80,x*50+50)) )
            self.horizontalSlider_12.setValue(int(min(80,y*50+50)) )
    def setupUi(self, MainWindow,poser):
        self.cursorMove = QtCore.pyqtSignal(object)
        self.is_lock=0

        self.poser = poser
        self.last_pose = None
        # self.last_output_index = self.output_index_choice.GetSelection()
        self.last_output_numpy_image = None
        self.device = torch.device('cuda')

        self.current_choose_button=-1
        self.cur_time=0
        self.total_time=0





        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1362, 935)
        MainWindow.setLayoutDirection(QtCore.Qt.LeftToRight)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")



        self.cursor=None
        self.timer11 = QtCore.QTimer(self.centralwidget)
        self.timer11.setInterval(50)
        self.timer11.timeout.connect(self.call_cursor)
        self.timer11.start()


        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(1100, 460, 85, 19))
        self.checkBox.setObjectName("checkBox")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(70, 310, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 500, 1181, 411))
        self.groupBox.setObjectName("groupBox")
        self.gridLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(20, 40, 1141, 351))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setSpacing(9)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(1210, 600, 93, 28))
        self.pushButton_5.setObjectName("pushButton_5")


        self.pushButton_5_up = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5_up.setGeometry(QtCore.QRect(1210, 550, 93, 28))
        self.pushButton_5_up.setObjectName("pushButton_5_up")
        self.pushButton_5_up.setText('load')

        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(1210, 740, 93, 28))
        self.pushButton_6.setObjectName("pushButton_6")

        self.pushButton_e6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_e6.setGeometry(QtCore.QRect(1210, 790, 93, 28))
        self.pushButton_e6.setText("??")
        self.pushButton_e6.setObjectName("pushButton_e6")

        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(300, 10, 541, 501))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.comboBox_3 = QtWidgets.QComboBox(self.tab)
        self.comboBox_3.setGeometry(QtCore.QRect(60, 340, 331, 22))
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.label_2 = QtWidgets.QLabel(self.tab)
        self.label_2.setGeometry(QtCore.QRect(200, 160, 58, 15))
        self.label_2.setObjectName("label_2")
        self.comboBox = QtWidgets.QComboBox(self.tab)
        self.comboBox.setGeometry(QtCore.QRect(60, 30, 331, 22))
        self.comboBox.setObjectName("comboBox")

        self.textEdit2 = QtWidgets.QTextEdit(self.tab)
        self.textEdit2.setGeometry(QtCore.QRect(60, 80, 331, 65))
        self.textEdit2.setObjectName("textEdit2")


        #self.horizontalSlider = QtWidgets.QSlider(self.tab)
        #self.horizontalSlider.setGeometry(QtCore.QRect(40, 60, 361, 22))
        #self.horizontalSlider.setMaximum(100)
        #self.horizontalSlider.setSingleStep(1)
        #self.horizontalSlider.setProperty("value", 0)
        #self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        #self.horizontalSlider.setObjectName("horizontalSlider")
        self.horizontalSlider_5 = QtWidgets.QSlider(self.tab)
        self.horizontalSlider_5.setGeometry(QtCore.QRect(50, 390, 361, 22))
        self.horizontalSlider_5.setMaximum(100)
        self.horizontalSlider_5.setProperty("value", 0)
        self.horizontalSlider_5.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_5.setObjectName("horizontalSlider_5")
        self.horizontalSlider_3 = QtWidgets.QSlider(self.tab)
        self.horizontalSlider_3.setGeometry(QtCore.QRect(40, 230, 361, 22))
        self.horizontalSlider_3.setMaximum(100)
        self.horizontalSlider_3.setProperty("value", 0)
        self.horizontalSlider_3.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_3.setObjectName("horizontalSlider_3")
        self.horizontalSlider_6 = QtWidgets.QSlider(self.tab)
        self.horizontalSlider_6.setGeometry(QtCore.QRect(50, 440, 361, 22))
        self.horizontalSlider_6.setMaximum(100)
        self.horizontalSlider_6.setProperty("value", 0)
        self.horizontalSlider_6.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_6.setObjectName("horizontalSlider_6")
        #self.horizontalSlider_2 = QtWidgets.QSlider(self.tab)
        #self.horizontalSlider_2.setGeometry(QtCore.QRect(50, 120, 351, 22))
        #self.horizontalSlider_2.setMaximum(100)
        #self.horizontalSlider_2.setProperty("value", 0)
        #self.horizontalSlider_2.setOrientation(QtCore.Qt.Horizontal)
        #self.horizontalSlider_2.setObjectName("horizontalSlider_2")
        self.horizontalSlider_4 = QtWidgets.QSlider(self.tab)
        self.horizontalSlider_4.setGeometry(QtCore.QRect(40, 280, 351, 22))
        self.horizontalSlider_4.setMaximum(100)
        self.horizontalSlider_4.setProperty("value", 0)
        self.horizontalSlider_4.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_4.setObjectName("horizontalSlider_4")
        self.label = QtWidgets.QLabel(self.tab)
        self.label.setGeometry(QtCore.QRect(160, -20, 58, 15))
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(self.tab)
        self.label_3.setGeometry(QtCore.QRect(170, 310, 58, 15))
        self.label_3.setObjectName("label_3")
        self.comboBox_2 = QtWidgets.QComboBox(self.tab)
        self.comboBox_2.setGeometry(QtCore.QRect(50, 180, 331, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.pushButton_4 = QtWidgets.QPushButton(self.tab)
        self.pushButton_4.setGeometry(QtCore.QRect(420, 410, 93, 28))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_3 = QtWidgets.QPushButton(self.tab)
        self.pushButton_3.setGeometry(QtCore.QRect(420, 250, 93, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_2 = QtWidgets.QPushButton(self.tab)
        self.pushButton_2.setGeometry(QtCore.QRect(420, 100, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.textEdit = QtWidgets.QTextEdit(self.tab)
        self.textEdit.setGeometry(QtCore.QRect(420, 20, 101, 41))
        self.textEdit.setObjectName("textEdit")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.label_4 = QtWidgets.QLabel(self.tab_2)
        self.label_4.setGeometry(QtCore.QRect(160, 160, 121, 16))
        self.label_4.setObjectName("label_4")
        self.horizontalSlider_7 = QtWidgets.QSlider(self.tab_2)
        self.horizontalSlider_7.setGeometry(QtCore.QRect(30, 50, 361, 22))
        self.horizontalSlider_7.setMaximum(100)
        self.horizontalSlider_7.setProperty("value", 0)
        self.horizontalSlider_7.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_7.setObjectName("horizontalSlider_7")
        self.horizontalSlider_8 = QtWidgets.QSlider(self.tab_2)
        self.horizontalSlider_8.setGeometry(QtCore.QRect(20, 100, 361, 22))
        self.horizontalSlider_8.setMaximum(100)
        self.horizontalSlider_8.setProperty("value", 0)
        self.horizontalSlider_8.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_8.setObjectName("horizontalSlider_8")
        self.horizontalSlider_9 = QtWidgets.QSlider(self.tab_2)
        self.horizontalSlider_9.setGeometry(QtCore.QRect(20, 200, 361, 22))
        self.horizontalSlider_9.setMaximum(100)
        self.horizontalSlider_9.setProperty("value", 50)
        self.horizontalSlider_9.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_9.setObjectName("horizontalSlider_9")
        self.pushButton_7 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_7.setGeometry(QtCore.QRect(420, 340, 93, 28))
        self.pushButton_7.setObjectName("pushButton_7")
        self.horizontalSlider_10 = QtWidgets.QSlider(self.tab_2)
        self.horizontalSlider_10.setGeometry(QtCore.QRect(10, 250, 351, 22))
        self.horizontalSlider_10.setMaximum(100)
        self.horizontalSlider_10.setProperty("value", 50)
        self.horizontalSlider_10.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_10.setObjectName("horizontalSlider_10")
        self.horizontalSlider_11 = QtWidgets.QSlider(self.tab_2)
        self.horizontalSlider_11.setGeometry(QtCore.QRect(30, 320, 351, 22))
        self.horizontalSlider_11.setMaximum(100)
        self.horizontalSlider_11.setProperty("value", 50)
        self.horizontalSlider_11.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_11.setObjectName("horizontalSlider_11")
        self.pushButton_8 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_8.setGeometry(QtCore.QRect(420, 220, 93, 28))
        self.pushButton_8.setObjectName("pushButton_8")
        self.horizontalSlider_12 = QtWidgets.QSlider(self.tab_2)
        self.horizontalSlider_12.setGeometry(QtCore.QRect(20, 370, 351, 22))
        self.horizontalSlider_12.setMaximum(100)
        self.horizontalSlider_12.setProperty("value", 50)
        self.horizontalSlider_12.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_12.setObjectName("horizontalSlider_12")
        self.pushButton_9 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_9.setGeometry(QtCore.QRect(420, 70, 93, 28))
        self.pushButton_9.setObjectName("pushButton_9")
        self.label_5 = QtWidgets.QLabel(self.tab_2)
        self.label_5.setGeometry(QtCore.QRect(180, 300, 58, 15))
        self.label_5.setObjectName("label_5")
        self.horizontalSlider_13 = QtWidgets.QSlider(self.tab_2)
        self.horizontalSlider_13.setGeometry(QtCore.QRect(20, 420, 351, 22))
        self.horizontalSlider_13.setMaximum(100)
        self.horizontalSlider_13.setProperty("value", 50)
        self.horizontalSlider_13.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_13.setObjectName("horizontalSlider_13")
        self.label_15 = QtWidgets.QLabel(self.tab_2)
        self.label_15.setGeometry(QtCore.QRect(150, 20, 121, 16))
        self.label_15.setObjectName("label_15")
        self.tabWidget.addTab(self.tab_2, "")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(20, 380, 71, 16))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(20, 420, 58, 15))
        self.label_7.setObjectName("label_7")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(1210, 670, 93, 28))
        self.pushButton_10.setObjectName("pushButton_10")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(25, 30, 58, 15))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(1070, 50, 58, 15))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(850, 70, 91, 16))
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(20, 450, 58, 15))
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(140, 380, 58, 15))
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(140, 410, 58, 15))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(140, 450, 58, 15))
        self.label_14.setObjectName("label_14")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(1050, 50, 301, 51))
        self.textEdit_2.setObjectName("textEdit_2")

        #self.pushButton_lock = QtWidgets.QPushButton(self.centralwidget)
        #self.pushButton_lock.setGeometry(QtCore.QRect(1050, 15, 93, 25))
        #self.pushButton_lock.setObjectName("pushButton_lock")
        #self.pushButton_lock.setText('lock')
        #self.pushButton_lock.clicked.connect(self.lock_window)


        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1362, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.button_list=[]
        self.dic={}
        self.dic['wink']=12
        self.dic['happy'] = 14
        self.dic['suprised'] = 16
        self.dic['relaxed'] = 18
        self.dic['unimpressed'] = 20
        self.dic['raise_lower'] = 22

        self.dic['small-l'] = 24
        self.dic['small-r'] = 25

        self.dic['aaa'] = 26
        self.dic['iii'] = 27
        self.dic['uuu'] = 28
        self.dic['eee'] = 29
        self.dic['ooo'] = 30
        self.dic['delta'] = 31
        self.dic['lower_corner'] = 32
        self.dic['raise_corner'] = 34
        self.dic['smirk'] = 36


        self.dic['irisxy-l'] = 37
        self.dic['irisxy-r'] = 38

        self.dic['head-x'] = 39
        self.dic['head-y'] = 40
        self.dic['head-z'] = 41

        self.button_list_dic = []
        self.grid_num = 12
        for i in range(0, self.grid_num, 1):
            for j in range(0, self.grid_num, 1):
                num=i *self.grid_num + j
                btn1 = QtWidgets.QPushButton(self.centralwidget, objectName=str(num))  # 建立按鈕
                btn1.setStyleSheet('''QPushButton{background:#ffffff;}''')

                btn1.clicked.connect(self.on_click)
                btn1.setText('null')
                self.button_list.append(btn1)


                self.gridLayout.addWidget(btn1, i, j)
                self.button_list_dic.append({})
                self.button_list_dic[num]['type']='null'
                self.button_list_dic[num]['val_1'] = 'null'
                self.button_list_dic[num]['val_2'] = 'null'
                self.button_list_dic[num]['val_3'] = 'null'
                self.button_list_dic[num]['time'] = 'null'


        self.pushButton_5_up.clicked.connect(self.load_action)

        self.pushButton.clicked.connect(self.load_click)
        self.mytimer = QTimer()
        self.mytimer.timeout.connect(self.update_result_image_panel)
        self.refresh_time = 50
        self.cv_img = None
        self.cv_show = None
        self.mytimer.start(self.refresh_time)
        self.torch_image = None
        self.pre_pose=[]
        self.is_load=0
        self.textEdit.setText('1000')

        self.pushButton_2.clicked.connect(self.save_line)
        self.pushButton_3.clicked.connect(self.save_eye)
        self.pushButton_4.clicked.connect(self.save_mouth)

        self.pushButton_9.clicked.connect(self.save_small)

        self.pushButton_8.clicked.connect(self.save_irisxy)
        self.pushButton_7.clicked.connect(self.save_head)

        self.pushButton_e6.clicked.connect(self.zero_all_pos)
        self.pushButton_6.clicked.connect(self.clear_item)

        self.pre_click=0
        self.pre_click_button = None

        self.action_flag=0
        self.next_line=''

        self.pushButton_5.clicked.connect(self.action_start)
        self.pushButton_10.clicked.connect(self.save_action)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def action_start(self):
        sanae=1
        self.zero_all_pos()
        self.update_result_image_first()
        self.action_flag=1
        self.cur_time=0
        self.time_array=np.zeros((10000, 42))
        self.total_time = 0

        for i in range(0,self.grid_num,1):
            sum1=0
            sum2=0
            sum3=0
            self.part_time=0

            for j in range(0,self.grid_num,1):
                button_type=self.button_list_dic[i*self.grid_num+j]['type']
                if(button_type!='null'):
                    val1=self.button_list_dic[i*self.grid_num+j]['val_1']
                    val2 = self.button_list_dic[i * self.grid_num + j]['val_2']
                    val3=self.button_list_dic[i * self.grid_num + j]['val_3']
                    time_val=self.button_list_dic[i * self.grid_num + j]['time']

                    step_num=(int)(time_val)//50

                    step_val1=0
                    step_val2=0
                    step_val3=0

                    if(val1!='null' and i!=5):
                        step_val1 = (float(val1)-sum1) / step_num
                    if(val2!='null'):
                        step_val2=(float(val2)-sum2) / step_num
                    if(val3!='null'):
                        step_val3=(float(val3)-sum3)/step_num

                    if(i==0):
                        for k in range(0,step_num,1):

                            self.part_time += 50
                            sum1+=step_val1
                            self.time_array[self.part_time][self.dic[button_type]]=sum1
                            sum2+=step_val2
                            self.time_array[self.part_time][self.dic[button_type]+1]=sum2

                    if(i==1):
                        for k in range(0,step_num,1):

                            self.part_time+=50
                            sum1+=step_val1
                            self.time_array[self.part_time][self.dic[button_type]]=sum1

                    if(i==2):
                        for k in range(0,step_num,1):

                            self.part_time += 50
                            sum1+=step_val1
                            self.time_array[self.part_time][24]=sum1
                            sum2+=step_val2
                            self.time_array[self.part_time][25]=sum2

                    if(i==3):
                        for k in range(0,step_num,1):

                            self.part_time += 50
                            sum1+=step_val1
                            self.time_array[self.part_time][37]=sum1
                            sum2+=step_val2
                            self.time_array[self.part_time][38]=sum2


                    if(i==4):
                        for k in range(0,step_num,1):

                            self.part_time+=50
                            sum1+=step_val1
                            self.time_array[self.part_time][39]=sum1
                            sum2+=step_val2
                            self.time_array[self.part_time][40]=sum2
                            sum3+=step_val3
                            self.time_array[self.part_time][41]=sum3
                    self.total_time=max(self.total_time,self.part_time)

                    if(i==5):
                        if(button_type=='line'):
                            self.next_line=val1

        self.time_array=self.time_array.astype('float32')

    def load_action(self):
        sanae=1
        action_num = len(os.listdir('./action'))

        choose=random.randint(0, action_num-1)

        f = open('./action'+'\\'+str(choose)+'.txt', "r")

        for i in range(0, self.grid_num, 1):
            content=f.readline()
            content_list=content.split(' ')

            for j in range(0, len(content_list), 1):
                content_list_list=content_list[j].split('_')
                button_type=content_list_list[0]
                self.button_list_dic[i * self.grid_num + j]['type']=content_list_list[0]
                self.button_list_dic[i*self.grid_num+j]['val_1']=content_list_list[1]
                self.button_list_dic[i*self.grid_num+j]['val_2']=content_list_list[2]
                self.button_list_dic[i*self.grid_num+j]['val_3']=content_list_list[3]
                self.button_list_dic[i*self.grid_num+j]['time']=content_list_list[4]

                if(button_type!='null'):
                    self.button_list[i*self.grid_num+j].setText('has_value')
                else:
                    self.button_list[i * self.grid_num + j].setText('null')
    def save_action(self):
        sanae=1
        content = ''
        for i in range(0,self.grid_num,1):

            for j in range(0,self.grid_num,1):
                self.button_list_dic[i*self.grid_num+j]
                button_type=self.button_list_dic[i*self.grid_num+j]['type']
                val_1=  str(self.button_list_dic[i*self.grid_num+j]['val_1'])
                val_2 = str(self.button_list_dic[i * self.grid_num + j]['val_2'])
                val_3 = str(self.button_list_dic[i * self.grid_num + j]['val_3'])
                tim   = str(self.button_list_dic[i * self.grid_num + j]['time'])

                content+=button_type+'_'+val_1+'_'+val_2+'_'+val_3+'_'+tim
                if(j<self.grid_num-1):
                    content+=' '
            content+='\n'

        action_num=len(os.listdir('./action'))

        f = open('./action'+'\\'+str(action_num)+'.txt', "w")
        f.write(content)
        f.close()

    def save_line(self):
        sanae=1
        if(self.current_choose_button!=-1):

            #print(self.button_list_dic[self.current_choose_button])
            self.button_list_dic[self.current_choose_button]['type']='line'
            self.button_list_dic[self.current_choose_button]['time']=str(50)
            self.button_list_dic[self.current_choose_button]['val_1']=self.textEdit2.toPlainText()
            self.button_list[self.current_choose_button].setText('has_value')

    def save_eye(self):
        sanae = 1
        if(self.current_choose_button!=-1):
            #print(self.button_list_dic[self.current_choose_button])
            self.button_list_dic[self.current_choose_button]['type']=self.comboBox_2.currentText()
            self.button_list_dic[self.current_choose_button]['time']=self.textEdit.toPlainText()

            self.button_list_dic[self.current_choose_button]['val_1']=self.horizontalSlider_3.value()/100.0
            self.button_list_dic[self.current_choose_button]['val_2'] = self.horizontalSlider_4.value()/100.0

            self.button_list[self.current_choose_button].setText('has_value')
    def save_mouth(self):
        sanae = 1
        if(self.current_choose_button!=-1):
            #print(self.button_list_dic[self.current_choose_button])
            self.button_list_dic[self.current_choose_button]['type']=self.comboBox_3.currentText()
            self.button_list_dic[self.current_choose_button]['time']=self.textEdit.toPlainText()

            self.button_list_dic[self.current_choose_button]['val_1']=self.horizontalSlider_5.value()/100.0

            self.button_list[self.current_choose_button].setText('has_value')
    def save_small(self):
        sanae = 1
        if(self.current_choose_button!=-1):
            #print(self.button_list_dic[self.current_choose_button])
            self.button_list_dic[self.current_choose_button]['type']='small'
            self.button_list_dic[self.current_choose_button]['time']=self.textEdit.toPlainText()

            self.button_list_dic[self.current_choose_button]['val_1']=self.horizontalSlider_7.value()/100.0
            self.button_list_dic[self.current_choose_button]['val_2'] = self.horizontalSlider_8.value()/100.0

            self.button_list[self.current_choose_button].setText('has_value')
    def save_irisxy(self):
        sanae = 1
        if(self.current_choose_button!=-1):
            #print(self.button_list_dic[self.current_choose_button])
            self.button_list_dic[self.current_choose_button]['type']='iris-xy'
            self.button_list_dic[self.current_choose_button]['time']=self.textEdit.toPlainText()

            self.button_list_dic[self.current_choose_button]['val_1']=(self.horizontalSlider_9.value()-50)/50.0
            self.button_list_dic[self.current_choose_button]['val_2'] =( self.horizontalSlider_10.value()-50)/50.0

            self.button_list[self.current_choose_button].setText('has_value')
    def save_head(self):
        sanae = 1
        if(self.current_choose_button!=-1):
            #print(self.button_list_dic[self.current_choose_button])
            self.button_list_dic[self.current_choose_button]['type']='head'
            self.button_list_dic[self.current_choose_button]['time']=self.textEdit.toPlainText()

            self.button_list_dic[self.current_choose_button]['val_1']= (self.horizontalSlider_11.value()-50)/50.0
            self.button_list_dic[self.current_choose_button]['val_2'] = (self.horizontalSlider_12.value()-50)/50.0
            self.button_list_dic[self.current_choose_button]['val_3'] = (self.horizontalSlider_13.value()-50)/50.0


            self.button_list[self.current_choose_button].setText('has_value')

    def extract_pytorch_image_from_np_image(self,image, scale=2.0, offset=-1.0):

        h, w, c = image.shape
        image = image.reshape(h * w, c)
        for pixel in image:
            if pixel[3] == 0.0:
                pixel[0:3] = 0.0
        image = image.transpose().reshape(c, h, w)
        torch_image = torch.from_numpy(image).float() * scale + offset
        return torch_image

    def load_click(self):

        global cnt
        cnt=1
        self.is_load = 1
        #print(self.tabWidget.sender().objectName())
        #self.label_6.setText("123")
        self.cv_img = cv2.imread('sanae.png', cv2.IMREAD_UNCHANGED)
        self.cv_show = cv2.imread('sanae.png')

        image_file_name = os.path.join('sanae.png')
        pil_image = resize_PIL_image(extract_PIL_image_from_filelike(image_file_name))

        self.torch_image = extract_pytorch_image_from_PIL_image(pil_image).to(self.device)
        #self.torch_image=self.extract_pytorch_image_from_np_image(self.cv_img).to(self.device)



        self.label_8.resize(256, 256)
        self.label_9.resize(256, 256)
        self.cv_show = cv2.cvtColor(self.cv_show, cv2.COLOR_BGR2RGB)
        self.image = QImage(self.cv_show.data, 256, 256, 256 * 3, QImage.Format.Format_RGB888)

        self.label_8.setPixmap(QPixmap.fromImage(self.image))
        self.label_9.setPixmap(QPixmap.fromImage(self.image))
        self.update_result_image_first()

    def clear_item(self):
        self.button_list_dic[self.current_choose_button]['type'] = 'null'
        self.button_list_dic[self.current_choose_button]['time'] = 'null'

        self.button_list_dic[self.current_choose_button]['val_1'] = 'null'
        self.button_list_dic[self.current_choose_button]['val_2'] = 'null'
        self.button_list_dic[self.current_choose_button]['val_3'] = 'null'
        self.button_list[self.current_choose_button].setText('null')


    def on_click(self):
        #print(self.tabWidget.sender().objectName())
        self.current_choose_button=(int)(self.tabWidget.sender().objectName())

        self.label_6.setText('type:'+self.button_list_dic[self.current_choose_button]['type'])
        self.label_7.setText('val_1:' + str(self.button_list_dic[self.current_choose_button]['val_1']) )
        self.label_11.setText('time:' + str(self.button_list_dic[self.current_choose_button]['time']) )
        self.label_12.setText('val_2:' + str(self.button_list_dic[self.current_choose_button]['val_2']) )
        self.label_13.setText('val_3:'+str(self.button_list_dic[self.current_choose_button]['val_3']))

        self.tabWidget.sender().setStyleSheet('''QPushButton{background:#00ff00;}''')

        if(self.pre_click==1 and self.pre_click_button!=self.tabWidget.sender()):
            self.pre_click_button.setStyleSheet('''QPushButton{background:#ffffff;}''')

        self.pre_click=1
        self.pre_click_button=self.tabWidget.sender()
    def zero_all_pos(self):
        self.horizontalSlider_3.setValue(0)
        self.horizontalSlider_4.setValue(0)
        self.horizontalSlider_5.setValue(0)
        self.horizontalSlider_7.setValue(0)
        self.horizontalSlider_8.setValue(0)

        self.horizontalSlider_9.setValue(50)
        self.horizontalSlider_10.setValue(50)
        self.horizontalSlider_11.setValue(50)
        self.horizontalSlider_12.setValue(50)
        self.horizontalSlider_13.setValue(50)

    def get_current_pose(self):
        current_pose = [0.0 for i in range(self.poser.get_num_parameters())]

        eye_type=self.comboBox_2.currentText()
        current_pose[self.dic[eye_type]]=self.horizontalSlider_3.value()/100.0
        current_pose[self.dic[eye_type]+1] = self.horizontalSlider_4.value() / 100.0
        mouth_type=self.comboBox_3.currentText()

        current_pose[self.dic[mouth_type]] = self.horizontalSlider_5.value() / 100.0

        current_pose[self.dic['small-l']]=self.horizontalSlider_7.value()/100.0
        current_pose[self.dic['small-r']] = self.horizontalSlider_8.value() / 100.0

        current_pose[self.dic['irisxy-l']] = (self.horizontalSlider_9.value()-50) / 50.0
        current_pose[self.dic['irisxy-r']] = (self.horizontalSlider_10.value() - 50) / 50.0

        current_pose[self.dic['head-x']] = (self.horizontalSlider_11.value() - 50) / 50.0
        current_pose[self.dic['head-y']] = (self.horizontalSlider_12.value() - 50) / 50.0
        current_pose[self.dic['head-z']] = (self.horizontalSlider_13.value() - 50) / 50.0

        '''
        for morph_control_panel in self.morph_control_panels.values():
            morph_control_panel.set_param_value(current_pose)
        for rotation_control_panel in self.rotation_control_panels.values():
            rotation_control_panel.set_param_value(current_pose)
        '''

        return current_pose


    def update_result_image_panel(self):
        global cnt
        current_pose = self.get_current_pose()
        if(self.cur_time>=self.total_time):

            if(self.action_flag==1):
                self.action_flag=0
                self.total_time=0
                self.cur_time=0
                self.next_line=''

                '''
                self.action_flag=-1
                '''
        '''
        if(self.cur_time<=0):
            if(self.action_flag==-1):
                self.action_flag=0
                self.total_time=0
                self.cur_time=0
        '''

        #print(type(current_pose[0]))
        if(self.total_time>0):
            self.textEdit_2.setText(self.next_line)
            for i in range(0,42,1):
                current_pose[i]=self.time_array[self.cur_time][i]
                '''
                if(i>=12 and i<=23):
                    if(i%2==0 and (self.time_array[self.cur_time][i]>0.05)):
                        self.horizontalSlider_3.setValue((int)(self.time_array[self.cur_time][i]*100 ) )
                    elif(i%2==1 and (self.time_array[self.cur_time][i]>0.05)):
                        self.horizontalSlider_4.setValue((int)(self.time_array[self.cur_time][i] * 100) )

                if(i>=26 and i<=36 and (self.time_array[self.cur_time][i]>0.05)):
                    self.horizontalSlider_5.setValue((int)(self.time_array[self.cur_time][i]*100))
                if(i==24 and (self.time_array[self.cur_time][i]>0.05)):
                    self.horizontalSlider_7.setValue((int)(self.time_array[self.cur_time][i]*100))
                if(i==25 and (self.time_array[self.cur_time][i]>0.05) ):
                    self.horizontalSlider_8.setValue((int)(self.time_array[self.cur_time][i] * 100))
                if(i==37 and (self.time_array[self.cur_time][i]>0.05 or self.time_array[self.cur_time][i]<-0.05)):
                    self.horizontalSlider_9.setValue((int)(self.time_array[self.cur_time][i] * 50+50))
                if(i==38 and (self.time_array[self.cur_time][i]>0.05 or self.time_array[self.cur_time][i]<-0.05)):
                    self.horizontalSlider_10.setValue((int)(self.time_array[self.cur_time][i] * 50+50))
                if (i == 39) and (self.time_array[self.cur_time][i]>0.05 or self.time_array[self.cur_time][i]<-0.05):
                    self.horizontalSlider_11.setValue((int)(self.time_array[self.cur_time][i] * 50 + 50))
                if(i==40 and (self.time_array[self.cur_time][i]>0.05 or self.time_array[self.cur_time][i]<-0.05)):
                    self.horizontalSlider_12.setValue((int)(self.time_array[self.cur_time][i] * 50+50))
                if (i == 41 and (self.time_array[self.cur_time][i]>0.05 or self.time_array[self.cur_time][i]<-0.05) ):
                    self.horizontalSlider_13.setValue((int)(self.time_array[self.cur_time][i] * 50 + 50))
                '''



            if(self.action_flag==1):
                self.cur_time+=50
            '''
            elif(self.action_flag==-1):
                self.cur_time-=50
            '''

            #print(type(current_pose[0]))
        change_flag = 0
        for i in range(0,len(self.pre_pose),1):
            if(current_pose[i]!=self.pre_pose[i]):
                change_flag=1

        if(self.action_flag!=0):

            change_flag=1
        self.pre_pose = current_pose.copy()

        if (change_flag==0 or self.is_load==0):
            return

        pose = torch.tensor(current_pose, device=self.device)


        output_index = 0

        output_image = self.poser.pose(self.torch_image, pose, output_index)[0].detach().cpu()

        numpy_image = numpy.uint8(numpy.rint(convert_output_image_from_torch_to_numpy(output_image) * 255.0))
        self.last_output_numpy_image = numpy_image
        #numpy_image1=numpy_image[:, :, 0:3]
        numpy_image = cv2.cvtColor(numpy_image, cv2.COLOR_RGBA2RGB)

        numpy_image = QImage(numpy_image, 256, 256, 256 * 3, QImage.Format.Format_RGB888)

        self.label_9.setPixmap(QPixmap.fromImage(numpy_image))

    def update_result_image_first(self):
        global cnt
        current_pose = self.get_current_pose()

        pose = torch.tensor(current_pose, device=self.device)

        output_index = 0

        output_image = self.poser.pose(self.torch_image, pose, output_index)[0].detach().cpu()

        numpy_image = numpy.uint8(numpy.rint(convert_output_image_from_torch_to_numpy(output_image) * 255.0))
        self.last_output_numpy_image = numpy_image
        # numpy_image1=numpy_image[:, :, 0:3]
        numpy_image = cv2.cvtColor(numpy_image, cv2.COLOR_RGBA2RGB)

        numpy_image = QImage(numpy_image, 256, 256, 256 * 3, QImage.Format.Format_RGB888)

        self.label_9.setPixmap(QPixmap.fromImage(numpy_image))


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.checkBox.setText(_translate("MainWindow", "隱藏"))
        self.pushButton.setText(_translate("MainWindow", "讀圖"))
        self.groupBox.setTitle(_translate("MainWindow", "GroupBox"))
        self.pushButton_5.setText(_translate("MainWindow", "演示"))
        self.pushButton_6.setText(_translate("MainWindow", "刪除"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "aaa"))
        self.comboBox_3.setItemText(1, _translate("MainWindow", "iii"))
        self.comboBox_3.setItemText(2, _translate("MainWindow", "uuu"))
        self.comboBox_3.setItemText(3, _translate("MainWindow", "eee"))
        self.comboBox_3.setItemText(4, _translate("MainWindow", "ooo"))
        self.comboBox_3.setItemText(5, _translate("MainWindow", "delta"))
        self.comboBox_3.setItemText(6, _translate("MainWindow", "lower-corner"))
        self.comboBox_3.setItemText(7, _translate("MainWindow", "raise-corner"))
        self.comboBox_3.setItemText(8, _translate("MainWindow", "smirk"))
        self.label_2.setText(_translate("MainWindow", "eye"))
        self.label.setText(_translate("MainWindow", "TextLabel"))
        self.label_3.setText(_translate("MainWindow", "mouth"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "wink"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "happy"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "suprised"))
        self.comboBox_2.setItemText(3, _translate("MainWindow", "relaxed"))
        self.comboBox_2.setItemText(4, _translate("MainWindow", "unimpressed"))
        self.comboBox_2.setItemText(5, _translate("MainWindow", "raise-lower"))
        self.pushButton_4.setText(_translate("MainWindow", "存嘴巴"))
        self.pushButton_3.setText(_translate("MainWindow", "存眼睛"))
        self.pushButton_2.setText(_translate("MainWindow", "存台詞"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Tab 1"))
        self.label_4.setText(_translate("MainWindow", "iris-rotation-xy"))
        self.pushButton_7.setText(_translate("MainWindow", "存身體"))
        self.pushButton_8.setText(_translate("MainWindow", "存iris"))
        self.pushButton_9.setText(_translate("MainWindow", "存iris-size"))
        self.label_5.setText(_translate("MainWindow", "xyz"))
        self.label_15.setText(_translate("MainWindow", "iris-small"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Tab 2"))
        self.label_6.setText(_translate("MainWindow", "TexyLabel"))
        self.label_7.setText(_translate("MainWindow", "TextLabel"))
        self.pushButton_10.setText(_translate("MainWindow", "存動作"))
        self.label_8.setText(_translate("MainWindow", "TextLabel"))
        self.label_9.setText(_translate("MainWindow", "TextLabel"))
        self.label_10.setText(_translate("MainWindow", "動作切換時間ms"))
        self.label_11.setText(_translate("MainWindow", "TextLabel"))
        self.label_12.setText(_translate("MainWindow", "TextLabel"))
        self.label_13.setText(_translate("MainWindow", "TextLabel"))
        self.label_14.setText(_translate("MainWindow", "TextLabel"))


def mousePress(self):
    if(self.x()>1000 and self.x()<1300 and self.y()>100 and self.y()<300):
        sanae=1
        ui.load_action()
        ui.action_start()


if __name__ == "__main__":
    import sys
    cuda = torch.device('cuda')
    import tha2.poser.modes.mode_20

    poser = tha2.poser.modes.mode_20.create_poser(cuda)
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow,poser)

    MainWindow.mousePressEvent=mousePress

    MainWindow.setWindowFlags(Qt.WindowStaysOnTopHint)
    
    MainWindow.show()

    sys.exit(app.exec_())
